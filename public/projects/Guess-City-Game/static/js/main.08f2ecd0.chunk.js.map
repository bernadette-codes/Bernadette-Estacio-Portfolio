{"version":3,"sources":["components/Context/Nav/nav.jsx","components/Context/Header/header.jsx","components/Figures/Start/start.jsx","components/Figures/GuessCity/GuessCity.jsx","components/Context/Prompt/prompt.jsx","components/Figures/Letters/alphabet.js","components/Figures/Letters/letters.jsx","components/Context/WordInput/wordInput.jsx","components/MainContent/cities.js","components/MainContent/mainContent.jsx","components/Context/Footer/footer.jsx","App.js","index.js"],"names":["Nav","href","target","rel","onClick","window","location","reload","Header","StartBtn","onPlay","setOnPlay","className","GuessCity","city","endPlay","setEndPlay","isLostGame","clickedLetters","useState","data","split","forEach","letter","i","push","id","visibility","guessed","cityBoxes","setCityBoxes","console","log","useEffect","clickedLettersLength","length","clickedLetter","newCityBoxes","map","box","count","Prompt","prompt","setPrompt","prompText","arrCity","letterLoc","indexOf","alphabet","Letters","setLastStage","setClickedLetters","letterBoxes","setletterBoxes","newLetterBoxes","letterBox","clickLetterHandle","WordInput","lastStage","setIsLostGame","guessWord","setGuessWord","inputShow","setInputShow","type","value","onChange","evt","toUpperCase","cities","Math","floor","random","MainContent","Footer","Date","getFullYear","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.08f2ecd0.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles.scss\";\n\nconst Nav = () => (\n  <nav>\n    <button>\n      <a\n        href=\"https://bernadetteestacio.site/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Home\n      </a>\n    </button>\n    <button>\n      <span onClick={() => window.location.reload()}>Reset</span>\n    </button>\n  </nav>\n);\n\nexport default Nav;\n","import React from \"react\";\nimport \"./styles.scss\";\n\nconst Header = () => <h1>Guess The City</h1>;\n\nexport default Header;\n","import React from \"react\";\nimport \"./styles.scss\";\n\nconst StartBtn = ({ onPlay, setOnPlay }) => (\n  <div>\n    <button\n      className={`start ${onPlay ? \" noDisplay\" : \" inlineDisplay\"}`}\n      onClick={() => setOnPlay(true)}\n    >\n      START\n    </button>\n  </div>\n);\n\nexport default StartBtn;\n","import React, { useState, useEffect } from \"react\";\nimport \"./styles.scss\";\n\nconst GuessCity = ({\n  city,\n  onPlay,\n  endPlay,\n  setEndPlay,\n  isLostGame,\n  clickedLetters,\n}) => {\n  const createCityBoxes = () => {\n    const data = [];\n    city\n      .split(\"\")\n      .forEach((letter, i) =>\n        data.push({ letter: letter, id: i, visibility: \"hide\", guessed: false })\n      );\n    return data;\n  };\n\n  const [cityBoxes, setCityBoxes] = useState(createCityBoxes);\n\n  console.log(\"city is \", city);\n\n  useEffect(() => {\n    if (onPlay) {\n      const clickedLettersLength = clickedLetters.length;\n      const clickedLetter = clickedLetters[clickedLettersLength - 1];\n      const newCityBoxes = cityBoxes.map((box) => {\n        if (box.letter === clickedLetter) {\n          box.visibility = \"show\";\n          box.guessed = true;\n        }\n        return box;\n      });\n      setCityBoxes(newCityBoxes);\n    }\n  }, [onPlay, clickedLetters]);\n\n  useEffect(() => {\n    let count = 0;\n    cityBoxes.forEach((box) => {\n      if (box.guessed) {\n        count++;\n      }\n    });\n\n    if (count === cityBoxes.length) {\n      setEndPlay(true);\n    }\n  }, [cityBoxes]);\n\n  useEffect(() => {\n    if (endPlay || isLostGame) {\n      const newCityBoxes = cityBoxes.map((box) => {\n        box.visibility = \"show\";\n        return box;\n      });\n      setCityBoxes(newCityBoxes);\n    }\n  }, [endPlay, isLostGame]);\n\n  return (\n    <ul className=\"showCity\">\n      {cityBoxes.map((box) => {\n        return (\n          <li\n            key={box.id}\n            className={\n              box.visibility +\n              (onPlay ? \" blockDisplay \" : \" noDisplay \") +\n              (endPlay || isLostGame ? \"flicker\" : null)\n            }\n          >\n            {box.letter}\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default GuessCity;\n","import React, { useState, useEffect } from \"react\";\nimport \"./styles.scss\";\n\nconst Prompt = ({ city, onPlay, endPlay, isLostGame, clickedLetters }) => {\n  const [prompt, setPrompt] = useState(\n    \"Select 6 letters before guessing the name of a city in the US.\"\n  );\n\n  useEffect(() => {\n    if (onPlay && endPlay === false) {\n      const arrCity = [...city];\n      const clickedLettersLength = clickedLetters.length;\n      const clickedLetter = clickedLetters[clickedLettersLength - 1];\n      const letterLoc = arrCity.indexOf(clickedLetter);\n      let prompText;\n      if (clickedLettersLength === 6) {\n        prompText = \"What is the word?\";\n      } else if (clickedLettersLength === 0) {\n        prompText = \"Guess 6 letters:\";\n      } else if (clickedLettersLength < 5) {\n        if (letterLoc === -1) {\n          prompText = `No letter ${clickedLetter}! \n          Guess ${6 - clickedLettersLength} letters:`;\n        } else {\n          prompText = `There is letter ${clickedLetter}!\n            Guess ${6 - clickedLettersLength} letters:`;\n        }\n      } else {\n        if (letterLoc === -1) {\n          prompText = `No letter ${clickedLetter}!\n            Guess a last letter:`;\n        } else {\n          prompText = `There is letter ${clickedLetter}!\n            Guess a last letter:`;\n        }\n      }\n      setPrompt(prompText);\n    }\n  }, [onPlay, city, clickedLetters, endPlay]);\n\n  useEffect(() => {\n    if (endPlay && !isLostGame) {\n      setPrompt(\"You guessed it!!!\");\n    } else if (isLostGame) {\n      setPrompt(\"That is incorrect. You lost the game!!!\");\n    }\n  }, [endPlay, isLostGame]);\n\n  return (\n    <div>\n      <p className={`prompt ${endPlay || isLostGame ? \"flicker\" : null}`}>\n        {prompt}\n      </p>\n    </div>\n  );\n};\n\nexport default Prompt;\n","const alphabet = [\n  \"A\",\n  \"B\",\n  \"C\",\n  \"D\",\n  \"E\",\n  \"F\",\n  \"G\",\n  \"H\",\n  \"I\",\n  \"J\",\n  \"K\",\n  \"L\",\n  \"M\",\n  \"N\",\n  \"O\",\n  \"P\",\n  \"Q\",\n  \"R\",\n  \"S\",\n  \"T\",\n  \"U\",\n  \"V\",\n  \"W\",\n  \"X\",\n  \"Y\",\n  \"Z\",\n];\n\nexport default alphabet;\n","import React, { useState, useEffect } from \"react\";\nimport alphabet from \"../Letters/alphabet\";\nimport \"./styles.scss\";\n\nconst Letters = ({\n  onPlay,\n  endPlay,\n  setLastStage,\n  clickedLetters,\n  setClickedLetters,\n}) => {\n  const createLetterBoxes = () => {\n    const data = [];\n    alphabet.forEach((letter) =>\n      data.push({ id: letter, visibility: \"visible\" })\n    );\n    return data;\n  };\n\n  const [letterBoxes, setletterBoxes] = useState(createLetterBoxes);\n\n  useEffect(() => {\n    if (clickedLetters.length === 6) {\n      setletterBoxes([]);\n      setLastStage(true);\n    }\n  }, [clickedLetters]);\n\n  const clickLetterHandle = (letter) => {\n    const newLetterBoxes = letterBoxes.map((letterBox) => {\n      if (letterBox.id === letter) {\n        letterBox.visibility = \"invisible\";\n      }\n      return letterBox;\n    });\n    setletterBoxes(newLetterBoxes);\n    setClickedLetters([...clickedLetters, letter]);\n  };\n\n  useEffect(() => {\n    if (endPlay) {\n      setletterBoxes([]);\n    }\n  }, [endPlay]);\n\n  return (\n    <div className={onPlay ? \"blockDisplay\" : \"noDisplay\"}>\n      <ul className=\"alphabet\">\n        {letterBoxes.map((letter) => {\n          return (\n            <li\n              key={letter.id}\n              className={letter.visibility}\n              onClick={() => clickLetterHandle(letter.id)}\n            >\n              {letter.id}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default Letters;\n","import React, { useState, useEffect } from \"react\";\nimport \"./styles.scss\";\n\nconst WordInput = ({ city, lastStage, endPlay, setEndPlay, setIsLostGame }) => {\n  const [guessWord, setGuessWord] = useState(\"\");\n  const [inputShow, setInputShow] = useState(false);\n  let visibility = inputShow ? \" visible\" : \" invisible\";\n\n  useEffect(() => {\n    if (lastStage) {\n      setInputShow(true);\n    }\n  }, [lastStage]);\n\n  useEffect(() => {\n    if (endPlay) {\n      setInputShow(false);\n    }\n  }, [endPlay]);\n\n  const changeHandle = (evt) => {\n    setGuessWord(evt.target.value);\n  };\n\n  const clickHandle = () => {\n    setInputShow(false);\n    if (guessWord.toUpperCase() === city) {\n      setEndPlay(true);\n    } else {\n      setIsLostGame(true);\n    }\n  };\n\n  console.log(\"guessWord\", guessWord);\n  return (\n    <div className={`word ${visibility}`}>\n      <input type=\"text\" value={guessWord} onChange={changeHandle} />\n      <button onClick={clickHandle}>Submit</button>\n    </div>\n  );\n};\n\nexport default WordInput;\n","const cities = [\n  \"Atlanta\",\n  \"Austin\",\n  \"Chicago\",\n  \"Dallas\",\n  \"Denver\",\n  \"Detroit\",\n  \"Houston\",\n  \"Memphis\",\n  \"Miami\",\n  \"Norfolk\",\n  \"Oakland\",\n  \"Omaha\",\n  \"Orlando\",\n  \"Phoenix\",\n  \"Portland\",\n  \"Raleigh\",\n  \"Reno\",\n  \"Seattle\",\n  \"Tampa\",\n  \"Tucson\",\n];\n\nexport default cities;\n","import React, { useState } from \"react\";\nimport Header from \"../Context/Header/header\";\nimport StartBtn from \"../Figures/Start/start\";\nimport GuessCity from \"../Figures/GuessCity/GuessCity\";\nimport Prompt from \"../Context/Prompt/prompt\";\nimport Letters from \"../Figures/Letters/letters\";\nimport WordInput from \"../Context/WordInput/wordInput\";\nimport cities from \"../MainContent/cities\";\nimport \"./styles.scss\";\n\nconst city = cities[Math.floor(Math.random() * 20)].toUpperCase();\n\nconst MainContent = () => {\n  const [onPlay, setOnPlay] = useState(false);\n  const [lastStage, setLastStage] = useState(false);\n  const [endPlay, setEndPlay] = useState(false);\n  const [isLostGame, setIsLostGame] = useState(false);\n  const [clickedLetters, setClickedLetters] = useState([]);\n\n  return (\n    <main>\n      <Header />\n\n      <StartBtn onPlay={onPlay} setOnPlay={setOnPlay} />\n\n      <GuessCity\n        city={city}\n        onPlay={onPlay}\n        endPlay={endPlay}\n        setEndPlay={setEndPlay}\n        isLostGame={isLostGame}\n        clickedLetters={clickedLetters}\n      />\n\n      <Prompt\n        city={city}\n        onPlay={onPlay}\n        endPlay={endPlay}\n        isLostGame={isLostGame}\n        clickedLetters={clickedLetters}\n      />\n\n      <Letters\n        onPlay={onPlay}\n        endPlay={endPlay}\n        setLastStage={setLastStage}\n        clickedLetters={clickedLetters}\n        setClickedLetters={setClickedLetters}\n      />\n\n      <WordInput\n        city={city}\n        lastStage={lastStage}\n        endPlay={endPlay}\n        setEndPlay={setEndPlay}\n        setIsLostGame={setIsLostGame}\n      />\n    </main>\n  );\n};\n\nexport default MainContent;\n","import React from \"react\";\nimport \"./styles.scss\";\n\nconst Footer = () => (\n  <footer>\n    <p>© 2017-{new Date().getFullYear()} Bernadette Estacio</p>\n  </footer>\n);\n\nexport default Footer;\n","import React from \"react\";\nimport Nav from \"./components/Context/Nav/nav\";\nimport MainContent from \"./components/MainContent/mainContent\";\nimport Footer from \"./components/Context/Footer/footer\";\n\nconst App = () => (\n  <div>\n    <Nav />\n    <MainContent />\n    <Footer />\n  </div>\n);\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}